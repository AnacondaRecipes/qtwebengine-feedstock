diff --git a/src/3rdparty/chromium/build/config/compiler/BUILD.gn b/src/3rdparty/chromium/build/config/compiler/BUILD.gn
index f596aa2..e238f69 100644
--- a/src/3rdparty/chromium/build/config/compiler/BUILD.gn
+++ b/src/3rdparty/chromium/build/config/compiler/BUILD.gn
@@ -2240,9 +2240,9 @@ config("default_warnings") {
   }
 
   # TODO(crbug.com/355446806): Clean up and enable.
-  if (is_apple) {
-    ldflags += [ "-Wl,-no_warn_duplicate_libraries" ]
-  }
+#  if (is_apple) {
+#    ldflags += [ "-Wl,-no_warn_duplicate_libraries" ]
+#  }
 
   # Rust warnings

diff --git a/src/3rdparty/chromium/build/mac/find_sdk.py b/src/3rdparty/chromium/build/mac/find_sdk.py
index 3dcc4d5..6457d57 100755
--- a/src/3rdparty/chromium/build/mac/find_sdk.py
+++ b/src/3rdparty/chromium/build/mac/find_sdk.py
@@ -69,14 +69,15 @@ def main():
     print(err, file=sys.stderr)
     raise Exception('Error %d running xcode-select' % job.returncode)
   dev_dir = out.decode('UTF-8').rstrip()
-  sdk_dir = os.path.join(
-      dev_dir, 'Platforms/MacOSX.platform/Developer/SDKs')
+  sdk_dir = os.environ.get("OSX_SDK_DIR")
+  if sdk_dir is None:
+    sdk_dir = os.path.join(dev_dir, 'SDKs')

   if not os.path.isdir(sdk_dir):
     raise SdkError('Install Xcode, launch it, accept the license ' +
       'agreement, and run `sudo xcode-select -s /path/to/Xcode.app` ' +
       'to continue.')
-  sdks = [re.findall('^MacOSX(\d+\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
+  sdks = [re.findall(r'^MacOSX(\d+\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
   sdks = [s[0] for s in sdks if s]  # [['10.5'], ['10.6']] => ['10.5', '10.6']
   sdks = [s for s in sdks  # ['10.5', '10.6'] => ['10.6']
           if parse_version(s) >= parse_version(min_sdk_version)]
@@ -90,8 +91,12 @@ def main():
     print(sdk_path)

   if options.print_bin_path:
-    bin_path = 'Toolchains/XcodeDefault.xctoolchain/usr/bin/'
-    print(os.path.join(dev_dir, bin_path))
+    prefix = os.environ.get("BUILD_PREFIX")
+    if prefix is not None:
+      print(prefix + "/bin/")
+    else:
+      bin_path = 'Toolchains/XcodeDefault.xctoolchain/usr/bin/'
+      print(os.path.join(dev_dir, bin_path))

   if options.print_sdk_build:
     system_version_plist = os.path.join(sdk_path,
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/metal/metal_backend.gni b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/metal/metal_backend.gni
index d3a8a1d..9f10553 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/metal/metal_backend.gni
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/metal/metal_backend.gni
@@ -92,8 +92,7 @@ metal_backend_sources = [
 # We can build the ANGLE internal shaders at build-time if we have access to the Mac SDK in the "build" dir.
 # Building internal shaders for iOS is not supported. The Chromium Mac SDK does not have all the required files.
 # This is also an issue when cross-compiling for mac.
-metal_internal_shader_compilation_supported =
-    angle_has_build && !is_ios && target_os == host_os
+metal_internal_shader_compilation_supported = false

 metal_internal_shaders_header =
     "$root_gen_dir/angle/mtl_internal_shaders_metallib.h"
